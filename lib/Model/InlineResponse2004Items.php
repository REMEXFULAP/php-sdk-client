<?php
/**
 * InlineResponse2004Items
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REMESITA API REST
 *
 * Api de remesita.com para desarrolladores. Primero obten tu apiKey y apiSecret, y para autenticarte debes ejecutar el endpoint rest/v1/auth en la respuesta obtendrÃ¡s un token de acceso que debes usar en el resto de peticiones
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse2004Items Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2004Items implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_4_items';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'balance' => 'float',
        'balance_formatted' => 'string',
        'balance_usd' => 'float',
        'balance_usd_formatted' => 'string',
        'status' => 'string',
        'number' => 'string',
        'number_formatted' => 'string',
        'exchange_rate' => 'float',
        'clabe' => 'string',
        'cash_reference' => 'string',
        'locked' => 'bool',
        'alias' => 'string',
        'main' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'balance' => null,
        'balance_formatted' => null,
        'balance_usd' => null,
        'balance_usd_formatted' => null,
        'status' => null,
        'number' => null,
        'number_formatted' => null,
        'exchange_rate' => null,
        'clabe' => null,
        'cash_reference' => null,
        'locked' => null,
        'alias' => null,
        'main' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'balance' => 'balance',
        'balance_formatted' => 'balanceFormatted',
        'balance_usd' => 'balanceUSD',
        'balance_usd_formatted' => 'balanceUSDFormatted',
        'status' => 'status',
        'number' => 'number',
        'number_formatted' => 'numberFormatted',
        'exchange_rate' => 'exchangeRate',
        'clabe' => 'clabe',
        'cash_reference' => 'cashReference',
        'locked' => 'locked',
        'alias' => 'alias',
        'main' => 'main'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'balance' => 'setBalance',
        'balance_formatted' => 'setBalanceFormatted',
        'balance_usd' => 'setBalanceUsd',
        'balance_usd_formatted' => 'setBalanceUsdFormatted',
        'status' => 'setStatus',
        'number' => 'setNumber',
        'number_formatted' => 'setNumberFormatted',
        'exchange_rate' => 'setExchangeRate',
        'clabe' => 'setClabe',
        'cash_reference' => 'setCashReference',
        'locked' => 'setLocked',
        'alias' => 'setAlias',
        'main' => 'setMain'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'balance' => 'getBalance',
        'balance_formatted' => 'getBalanceFormatted',
        'balance_usd' => 'getBalanceUsd',
        'balance_usd_formatted' => 'getBalanceUsdFormatted',
        'status' => 'getStatus',
        'number' => 'getNumber',
        'number_formatted' => 'getNumberFormatted',
        'exchange_rate' => 'getExchangeRate',
        'clabe' => 'getClabe',
        'cash_reference' => 'getCashReference',
        'locked' => 'getLocked',
        'alias' => 'getAlias',
        'main' => 'getMain'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['balance'] = isset($data['balance']) ? $data['balance'] : null;
        $this->container['balance_formatted'] = isset($data['balance_formatted']) ? $data['balance_formatted'] : null;
        $this->container['balance_usd'] = isset($data['balance_usd']) ? $data['balance_usd'] : null;
        $this->container['balance_usd_formatted'] = isset($data['balance_usd_formatted']) ? $data['balance_usd_formatted'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['number_formatted'] = isset($data['number_formatted']) ? $data['number_formatted'] : null;
        $this->container['exchange_rate'] = isset($data['exchange_rate']) ? $data['exchange_rate'] : null;
        $this->container['clabe'] = isset($data['clabe']) ? $data['clabe'] : null;
        $this->container['cash_reference'] = isset($data['cash_reference']) ? $data['cash_reference'] : null;
        $this->container['locked'] = isset($data['locked']) ? $data['locked'] : null;
        $this->container['alias'] = isset($data['alias']) ? $data['alias'] : null;
        $this->container['main'] = isset($data['main']) ? $data['main'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets balance
     *
     * @return float
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param float $balance Balance de la tarjeta
     *
     * @return $this
     */
    public function setBalance($balance)
    {
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets balance_formatted
     *
     * @return string
     */
    public function getBalanceFormatted()
    {
        return $this->container['balance_formatted'];
    }

    /**
     * Sets balance_formatted
     *
     * @param string $balance_formatted Balance de la tarjeta formateado
     *
     * @return $this
     */
    public function setBalanceFormatted($balance_formatted)
    {
        $this->container['balance_formatted'] = $balance_formatted;

        return $this;
    }

    /**
     * Gets balance_usd
     *
     * @return float
     */
    public function getBalanceUsd()
    {
        return $this->container['balance_usd'];
    }

    /**
     * Sets balance_usd
     *
     * @param float $balance_usd Balance en USD
     *
     * @return $this
     */
    public function setBalanceUsd($balance_usd)
    {
        $this->container['balance_usd'] = $balance_usd;

        return $this;
    }

    /**
     * Gets balance_usd_formatted
     *
     * @return string
     */
    public function getBalanceUsdFormatted()
    {
        return $this->container['balance_usd_formatted'];
    }

    /**
     * Sets balance_usd_formatted
     *
     * @param string $balance_usd_formatted Balance en USD formateado
     *
     * @return $this
     */
    public function setBalanceUsdFormatted($balance_usd_formatted)
    {
        $this->container['balance_usd_formatted'] = $balance_usd_formatted;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Estado de la tarjeta
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number NÃºmero de la tarjeta
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets number_formatted
     *
     * @return string
     */
    public function getNumberFormatted()
    {
        return $this->container['number_formatted'];
    }

    /**
     * Sets number_formatted
     *
     * @param string $number_formatted NÃºmero de la tarjeta formateado
     *
     * @return $this
     */
    public function setNumberFormatted($number_formatted)
    {
        $this->container['number_formatted'] = $number_formatted;

        return $this;
    }

    /**
     * Gets exchange_rate
     *
     * @return float
     */
    public function getExchangeRate()
    {
        return $this->container['exchange_rate'];
    }

    /**
     * Sets exchange_rate
     *
     * @param float $exchange_rate Tasa de cambio
     *
     * @return $this
     */
    public function setExchangeRate($exchange_rate)
    {
        $this->container['exchange_rate'] = $exchange_rate;

        return $this;
    }

    /**
     * Gets clabe
     *
     * @return string
     */
    public function getClabe()
    {
        return $this->container['clabe'];
    }

    /**
     * Sets clabe
     *
     * @param string $clabe CLABE de la tarjeta
     *
     * @return $this
     */
    public function setClabe($clabe)
    {
        $this->container['clabe'] = $clabe;

        return $this;
    }

    /**
     * Gets cash_reference
     *
     * @return string
     */
    public function getCashReference()
    {
        return $this->container['cash_reference'];
    }

    /**
     * Sets cash_reference
     *
     * @param string $cash_reference Referencia de efectivo
     *
     * @return $this
     */
    public function setCashReference($cash_reference)
    {
        $this->container['cash_reference'] = $cash_reference;

        return $this;
    }

    /**
     * Gets locked
     *
     * @return bool
     */
    public function getLocked()
    {
        return $this->container['locked'];
    }

    /**
     * Sets locked
     *
     * @param bool $locked Indica si la tarjeta estÃ¡ bloqueada
     *
     * @return $this
     */
    public function setLocked($locked)
    {
        $this->container['locked'] = $locked;

        return $this;
    }

    /**
     * Gets alias
     *
     * @return string
     */
    public function getAlias()
    {
        return $this->container['alias'];
    }

    /**
     * Sets alias
     *
     * @param string $alias Alias de la tarjeta
     *
     * @return $this
     */
    public function setAlias($alias)
    {
        $this->container['alias'] = $alias;

        return $this;
    }

    /**
     * Gets main
     *
     * @return bool
     */
    public function getMain()
    {
        return $this->container['main'];
    }

    /**
     * Sets main
     *
     * @param bool $main Indica si es la tarjeta principal
     *
     * @return $this
     */
    public function setMain($main)
    {
        $this->container['main'] = $main;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


