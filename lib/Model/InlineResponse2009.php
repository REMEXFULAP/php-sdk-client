<?php
/**
 * InlineResponse2009
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REMESITA API REST
 *
 * Api de remesita.com para desarrolladores. Primero obten tu apiKey y apiSecret, y para autenticarte debes ejecutar el endpoint rest/v1/auth en la respuesta obtendrás un token de acceso que debes usar en el resto de peticiones
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse2009 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2009 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_9';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'prepaid_card_combined_balance' => 'float',
        'prepaid_card_combined_balance_usd' => 'float',
        'referrals_commission' => 'float',
        'usd2mxn' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'prepaid_card_combined_balance' => null,
        'prepaid_card_combined_balance_usd' => null,
        'referrals_commission' => null,
        'usd2mxn' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'prepaid_card_combined_balance' => 'prepaidCardCombinedBalance',
        'prepaid_card_combined_balance_usd' => 'prepaidCardCombinedBalanceUsd',
        'referrals_commission' => 'referralsCommission',
        'usd2mxn' => 'usd2mxn'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'prepaid_card_combined_balance' => 'setPrepaidCardCombinedBalance',
        'prepaid_card_combined_balance_usd' => 'setPrepaidCardCombinedBalanceUsd',
        'referrals_commission' => 'setReferralsCommission',
        'usd2mxn' => 'setUsd2mxn'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'prepaid_card_combined_balance' => 'getPrepaidCardCombinedBalance',
        'prepaid_card_combined_balance_usd' => 'getPrepaidCardCombinedBalanceUsd',
        'referrals_commission' => 'getReferralsCommission',
        'usd2mxn' => 'getUsd2mxn'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['prepaid_card_combined_balance'] = isset($data['prepaid_card_combined_balance']) ? $data['prepaid_card_combined_balance'] : null;
        $this->container['prepaid_card_combined_balance_usd'] = isset($data['prepaid_card_combined_balance_usd']) ? $data['prepaid_card_combined_balance_usd'] : null;
        $this->container['referrals_commission'] = isset($data['referrals_commission']) ? $data['referrals_commission'] : null;
        $this->container['usd2mxn'] = isset($data['usd2mxn']) ? $data['usd2mxn'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets prepaid_card_combined_balance
     *
     * @return float
     */
    public function getPrepaidCardCombinedBalance()
    {
        return $this->container['prepaid_card_combined_balance'];
    }

    /**
     * Sets prepaid_card_combined_balance
     *
     * @param float $prepaid_card_combined_balance Balance combinado de la tarjeta prepago
     *
     * @return $this
     */
    public function setPrepaidCardCombinedBalance($prepaid_card_combined_balance)
    {
        $this->container['prepaid_card_combined_balance'] = $prepaid_card_combined_balance;

        return $this;
    }

    /**
     * Gets prepaid_card_combined_balance_usd
     *
     * @return float
     */
    public function getPrepaidCardCombinedBalanceUsd()
    {
        return $this->container['prepaid_card_combined_balance_usd'];
    }

    /**
     * Sets prepaid_card_combined_balance_usd
     *
     * @param float $prepaid_card_combined_balance_usd Balance combinado de la tarjeta prepago en USD
     *
     * @return $this
     */
    public function setPrepaidCardCombinedBalanceUsd($prepaid_card_combined_balance_usd)
    {
        $this->container['prepaid_card_combined_balance_usd'] = $prepaid_card_combined_balance_usd;

        return $this;
    }

    /**
     * Gets referrals_commission
     *
     * @return float
     */
    public function getReferralsCommission()
    {
        return $this->container['referrals_commission'];
    }

    /**
     * Sets referrals_commission
     *
     * @param float $referrals_commission Comisión de referidos
     *
     * @return $this
     */
    public function setReferralsCommission($referrals_commission)
    {
        $this->container['referrals_commission'] = $referrals_commission;

        return $this;
    }

    /**
     * Gets usd2mxn
     *
     * @return float
     */
    public function getUsd2mxn()
    {
        return $this->container['usd2mxn'];
    }

    /**
     * Sets usd2mxn
     *
     * @param float $usd2mxn Tasa de cambio de USD a MXN
     *
     * @return $this
     */
    public function setUsd2mxn($usd2mxn)
    {
        $this->container['usd2mxn'] = $usd2mxn;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


