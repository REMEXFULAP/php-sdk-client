<?php
/**
 * InlineResponse2005Items
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REMESITA API REST
 *
 * Api de remesita.com para desarrolladores. Primero obten tu apiKey y apiSecret, y para autenticarte debes ejecutar el endpoint rest/v1/auth en la respuesta obtendrÃ¡s un token de acceso que debes usar en el resto de peticiones
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse2005Items Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2005Items implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_5_items';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'status' => 'string',
        'speed_mode' => 'string',
        'reference' => 'string',
        'sku' => 'string',
        'recipient_account' => 'string',
        'swift' => 'string',
        'institution' => 'string',
        'sender_name' => 'string',
        'sender_country' => 'string',
        'recipient_name' => 'string',
        'recipient_country' => 'string',
        'recipient_relationship' => 'string',
        'payment_method' => 'string',
        'quotation' => 'string',
        'sender_currency' => 'string',
        'exchange_rate' => 'float',
        'life_time' => 'string',
        'created_at' => '\DateTime',
        'payed_at' => '\DateTime',
        'cancel_at' => '\DateTime',
        'completed_at' => '\DateTime',
        'institution_icon' => 'string',
        'cancel_reason' => 'string',
        'intent' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'status' => null,
        'speed_mode' => null,
        'reference' => null,
        'sku' => null,
        'recipient_account' => null,
        'swift' => null,
        'institution' => null,
        'sender_name' => null,
        'sender_country' => null,
        'recipient_name' => null,
        'recipient_country' => null,
        'recipient_relationship' => null,
        'payment_method' => null,
        'quotation' => null,
        'sender_currency' => null,
        'exchange_rate' => null,
        'life_time' => null,
        'created_at' => 'date-time',
        'payed_at' => 'date-time',
        'cancel_at' => 'date-time',
        'completed_at' => 'date-time',
        'institution_icon' => null,
        'cancel_reason' => null,
        'intent' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'speed_mode' => 'speedMode',
        'reference' => 'reference',
        'sku' => 'sku',
        'recipient_account' => 'recipientAccount',
        'swift' => 'swift',
        'institution' => 'institution',
        'sender_name' => 'senderName',
        'sender_country' => 'senderCountry',
        'recipient_name' => 'recipientName',
        'recipient_country' => 'recipientCountry',
        'recipient_relationship' => 'recipientRelationship',
        'payment_method' => 'paymentMethod',
        'quotation' => 'quotation',
        'sender_currency' => 'senderCurrency',
        'exchange_rate' => 'exchangeRate',
        'life_time' => 'lifeTime',
        'created_at' => 'createdAt',
        'payed_at' => 'payedAt',
        'cancel_at' => 'cancelAt',
        'completed_at' => 'completedAt',
        'institution_icon' => 'institutionIcon',
        'cancel_reason' => 'cancelReason',
        'intent' => 'intent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'speed_mode' => 'setSpeedMode',
        'reference' => 'setReference',
        'sku' => 'setSku',
        'recipient_account' => 'setRecipientAccount',
        'swift' => 'setSwift',
        'institution' => 'setInstitution',
        'sender_name' => 'setSenderName',
        'sender_country' => 'setSenderCountry',
        'recipient_name' => 'setRecipientName',
        'recipient_country' => 'setRecipientCountry',
        'recipient_relationship' => 'setRecipientRelationship',
        'payment_method' => 'setPaymentMethod',
        'quotation' => 'setQuotation',
        'sender_currency' => 'setSenderCurrency',
        'exchange_rate' => 'setExchangeRate',
        'life_time' => 'setLifeTime',
        'created_at' => 'setCreatedAt',
        'payed_at' => 'setPayedAt',
        'cancel_at' => 'setCancelAt',
        'completed_at' => 'setCompletedAt',
        'institution_icon' => 'setInstitutionIcon',
        'cancel_reason' => 'setCancelReason',
        'intent' => 'setIntent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'speed_mode' => 'getSpeedMode',
        'reference' => 'getReference',
        'sku' => 'getSku',
        'recipient_account' => 'getRecipientAccount',
        'swift' => 'getSwift',
        'institution' => 'getInstitution',
        'sender_name' => 'getSenderName',
        'sender_country' => 'getSenderCountry',
        'recipient_name' => 'getRecipientName',
        'recipient_country' => 'getRecipientCountry',
        'recipient_relationship' => 'getRecipientRelationship',
        'payment_method' => 'getPaymentMethod',
        'quotation' => 'getQuotation',
        'sender_currency' => 'getSenderCurrency',
        'exchange_rate' => 'getExchangeRate',
        'life_time' => 'getLifeTime',
        'created_at' => 'getCreatedAt',
        'payed_at' => 'getPayedAt',
        'cancel_at' => 'getCancelAt',
        'completed_at' => 'getCompletedAt',
        'institution_icon' => 'getInstitutionIcon',
        'cancel_reason' => 'getCancelReason',
        'intent' => 'getIntent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['speed_mode'] = isset($data['speed_mode']) ? $data['speed_mode'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['recipient_account'] = isset($data['recipient_account']) ? $data['recipient_account'] : null;
        $this->container['swift'] = isset($data['swift']) ? $data['swift'] : null;
        $this->container['institution'] = isset($data['institution']) ? $data['institution'] : null;
        $this->container['sender_name'] = isset($data['sender_name']) ? $data['sender_name'] : null;
        $this->container['sender_country'] = isset($data['sender_country']) ? $data['sender_country'] : null;
        $this->container['recipient_name'] = isset($data['recipient_name']) ? $data['recipient_name'] : null;
        $this->container['recipient_country'] = isset($data['recipient_country']) ? $data['recipient_country'] : null;
        $this->container['recipient_relationship'] = isset($data['recipient_relationship']) ? $data['recipient_relationship'] : null;
        $this->container['payment_method'] = isset($data['payment_method']) ? $data['payment_method'] : null;
        $this->container['quotation'] = isset($data['quotation']) ? $data['quotation'] : null;
        $this->container['sender_currency'] = isset($data['sender_currency']) ? $data['sender_currency'] : null;
        $this->container['exchange_rate'] = isset($data['exchange_rate']) ? $data['exchange_rate'] : null;
        $this->container['life_time'] = isset($data['life_time']) ? $data['life_time'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['payed_at'] = isset($data['payed_at']) ? $data['payed_at'] : null;
        $this->container['cancel_at'] = isset($data['cancel_at']) ? $data['cancel_at'] : null;
        $this->container['completed_at'] = isset($data['completed_at']) ? $data['completed_at'] : null;
        $this->container['institution_icon'] = isset($data['institution_icon']) ? $data['institution_icon'] : null;
        $this->container['cancel_reason'] = isset($data['cancel_reason']) ? $data['cancel_reason'] : null;
        $this->container['intent'] = isset($data['intent']) ? $data['intent'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets speed_mode
     *
     * @return string
     */
    public function getSpeedMode()
    {
        return $this->container['speed_mode'];
    }

    /**
     * Sets speed_mode
     *
     * @param string $speed_mode speed_mode
     *
     * @return $this
     */
    public function setSpeedMode($speed_mode)
    {
        $this->container['speed_mode'] = $speed_mode;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference reference
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku sku
     *
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets recipient_account
     *
     * @return string
     */
    public function getRecipientAccount()
    {
        return $this->container['recipient_account'];
    }

    /**
     * Sets recipient_account
     *
     * @param string $recipient_account recipient_account
     *
     * @return $this
     */
    public function setRecipientAccount($recipient_account)
    {
        $this->container['recipient_account'] = $recipient_account;

        return $this;
    }

    /**
     * Gets swift
     *
     * @return string
     */
    public function getSwift()
    {
        return $this->container['swift'];
    }

    /**
     * Sets swift
     *
     * @param string $swift swift
     *
     * @return $this
     */
    public function setSwift($swift)
    {
        $this->container['swift'] = $swift;

        return $this;
    }

    /**
     * Gets institution
     *
     * @return string
     */
    public function getInstitution()
    {
        return $this->container['institution'];
    }

    /**
     * Sets institution
     *
     * @param string $institution institution
     *
     * @return $this
     */
    public function setInstitution($institution)
    {
        $this->container['institution'] = $institution;

        return $this;
    }

    /**
     * Gets sender_name
     *
     * @return string
     */
    public function getSenderName()
    {
        return $this->container['sender_name'];
    }

    /**
     * Sets sender_name
     *
     * @param string $sender_name sender_name
     *
     * @return $this
     */
    public function setSenderName($sender_name)
    {
        $this->container['sender_name'] = $sender_name;

        return $this;
    }

    /**
     * Gets sender_country
     *
     * @return string
     */
    public function getSenderCountry()
    {
        return $this->container['sender_country'];
    }

    /**
     * Sets sender_country
     *
     * @param string $sender_country sender_country
     *
     * @return $this
     */
    public function setSenderCountry($sender_country)
    {
        $this->container['sender_country'] = $sender_country;

        return $this;
    }

    /**
     * Gets recipient_name
     *
     * @return string
     */
    public function getRecipientName()
    {
        return $this->container['recipient_name'];
    }

    /**
     * Sets recipient_name
     *
     * @param string $recipient_name recipient_name
     *
     * @return $this
     */
    public function setRecipientName($recipient_name)
    {
        $this->container['recipient_name'] = $recipient_name;

        return $this;
    }

    /**
     * Gets recipient_country
     *
     * @return string
     */
    public function getRecipientCountry()
    {
        return $this->container['recipient_country'];
    }

    /**
     * Sets recipient_country
     *
     * @param string $recipient_country recipient_country
     *
     * @return $this
     */
    public function setRecipientCountry($recipient_country)
    {
        $this->container['recipient_country'] = $recipient_country;

        return $this;
    }

    /**
     * Gets recipient_relationship
     *
     * @return string
     */
    public function getRecipientRelationship()
    {
        return $this->container['recipient_relationship'];
    }

    /**
     * Sets recipient_relationship
     *
     * @param string $recipient_relationship recipient_relationship
     *
     * @return $this
     */
    public function setRecipientRelationship($recipient_relationship)
    {
        $this->container['recipient_relationship'] = $recipient_relationship;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return string
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param string $payment_method payment_method
     *
     * @return $this
     */
    public function setPaymentMethod($payment_method)
    {
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets quotation
     *
     * @return string
     */
    public function getQuotation()
    {
        return $this->container['quotation'];
    }

    /**
     * Sets quotation
     *
     * @param string $quotation quotation
     *
     * @return $this
     */
    public function setQuotation($quotation)
    {
        $this->container['quotation'] = $quotation;

        return $this;
    }

    /**
     * Gets sender_currency
     *
     * @return string
     */
    public function getSenderCurrency()
    {
        return $this->container['sender_currency'];
    }

    /**
     * Sets sender_currency
     *
     * @param string $sender_currency sender_currency
     *
     * @return $this
     */
    public function setSenderCurrency($sender_currency)
    {
        $this->container['sender_currency'] = $sender_currency;

        return $this;
    }

    /**
     * Gets exchange_rate
     *
     * @return float
     */
    public function getExchangeRate()
    {
        return $this->container['exchange_rate'];
    }

    /**
     * Sets exchange_rate
     *
     * @param float $exchange_rate exchange_rate
     *
     * @return $this
     */
    public function setExchangeRate($exchange_rate)
    {
        $this->container['exchange_rate'] = $exchange_rate;

        return $this;
    }

    /**
     * Gets life_time
     *
     * @return string
     */
    public function getLifeTime()
    {
        return $this->container['life_time'];
    }

    /**
     * Sets life_time
     *
     * @param string $life_time life_time
     *
     * @return $this
     */
    public function setLifeTime($life_time)
    {
        $this->container['life_time'] = $life_time;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets payed_at
     *
     * @return \DateTime
     */
    public function getPayedAt()
    {
        return $this->container['payed_at'];
    }

    /**
     * Sets payed_at
     *
     * @param \DateTime $payed_at payed_at
     *
     * @return $this
     */
    public function setPayedAt($payed_at)
    {
        $this->container['payed_at'] = $payed_at;

        return $this;
    }

    /**
     * Gets cancel_at
     *
     * @return \DateTime
     */
    public function getCancelAt()
    {
        return $this->container['cancel_at'];
    }

    /**
     * Sets cancel_at
     *
     * @param \DateTime $cancel_at cancel_at
     *
     * @return $this
     */
    public function setCancelAt($cancel_at)
    {
        $this->container['cancel_at'] = $cancel_at;

        return $this;
    }

    /**
     * Gets completed_at
     *
     * @return \DateTime
     */
    public function getCompletedAt()
    {
        return $this->container['completed_at'];
    }

    /**
     * Sets completed_at
     *
     * @param \DateTime $completed_at completed_at
     *
     * @return $this
     */
    public function setCompletedAt($completed_at)
    {
        $this->container['completed_at'] = $completed_at;

        return $this;
    }

    /**
     * Gets institution_icon
     *
     * @return string
     */
    public function getInstitutionIcon()
    {
        return $this->container['institution_icon'];
    }

    /**
     * Sets institution_icon
     *
     * @param string $institution_icon institution_icon
     *
     * @return $this
     */
    public function setInstitutionIcon($institution_icon)
    {
        $this->container['institution_icon'] = $institution_icon;

        return $this;
    }

    /**
     * Gets cancel_reason
     *
     * @return string
     */
    public function getCancelReason()
    {
        return $this->container['cancel_reason'];
    }

    /**
     * Sets cancel_reason
     *
     * @param string $cancel_reason cancel_reason
     *
     * @return $this
     */
    public function setCancelReason($cancel_reason)
    {
        $this->container['cancel_reason'] = $cancel_reason;

        return $this;
    }

    /**
     * Gets intent
     *
     * @return string
     */
    public function getIntent()
    {
        return $this->container['intent'];
    }

    /**
     * Sets intent
     *
     * @param string $intent intent
     *
     * @return $this
     */
    public function setIntent($intent)
    {
        $this->container['intent'] = $intent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


