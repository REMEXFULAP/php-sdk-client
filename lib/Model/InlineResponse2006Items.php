<?php
/**
 * InlineResponse2006Items
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REMESITA API REST
 *
 * Api de remesita.com para desarrolladores. Primero obten tu apiKey y apiSecret, y para autenticarte debes ejecutar el endpoint rest/v1/auth en la respuesta obtendrÃ¡s un token de acceso que debes usar en el resto de peticiones
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse2006Items Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2006Items implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_6_items';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'match' => 'bool',
        'status' => 'string',
        'order' => 'string',
        'created_at' => '\DateTime',
        'completed_at' => '\DateTime',
        'payment_method' => 'string',
        'sku' => 'string',
        'quotation' => 'float',
        'quotation_currency' => 'string',
        'recipient_account' => 'string',
        'recipient_amount' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'match' => null,
        'status' => null,
        'order' => null,
        'created_at' => 'date-time',
        'completed_at' => 'date-time',
        'payment_method' => null,
        'sku' => null,
        'quotation' => null,
        'quotation_currency' => null,
        'recipient_account' => null,
        'recipient_amount' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'match' => 'match',
        'status' => 'status',
        'order' => 'order',
        'created_at' => 'createdAt',
        'completed_at' => 'completedAt',
        'payment_method' => 'paymentMethod',
        'sku' => 'sku',
        'quotation' => 'quotation',
        'quotation_currency' => 'quotationCurrency',
        'recipient_account' => 'recipientAccount',
        'recipient_amount' => 'recipientAmount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'match' => 'setMatch',
        'status' => 'setStatus',
        'order' => 'setOrder',
        'created_at' => 'setCreatedAt',
        'completed_at' => 'setCompletedAt',
        'payment_method' => 'setPaymentMethod',
        'sku' => 'setSku',
        'quotation' => 'setQuotation',
        'quotation_currency' => 'setQuotationCurrency',
        'recipient_account' => 'setRecipientAccount',
        'recipient_amount' => 'setRecipientAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'match' => 'getMatch',
        'status' => 'getStatus',
        'order' => 'getOrder',
        'created_at' => 'getCreatedAt',
        'completed_at' => 'getCompletedAt',
        'payment_method' => 'getPaymentMethod',
        'sku' => 'getSku',
        'quotation' => 'getQuotation',
        'quotation_currency' => 'getQuotationCurrency',
        'recipient_account' => 'getRecipientAccount',
        'recipient_amount' => 'getRecipientAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['match'] = isset($data['match']) ? $data['match'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['completed_at'] = isset($data['completed_at']) ? $data['completed_at'] : null;
        $this->container['payment_method'] = isset($data['payment_method']) ? $data['payment_method'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['quotation'] = isset($data['quotation']) ? $data['quotation'] : null;
        $this->container['quotation_currency'] = isset($data['quotation_currency']) ? $data['quotation_currency'] : null;
        $this->container['recipient_account'] = isset($data['recipient_account']) ? $data['recipient_account'] : null;
        $this->container['recipient_amount'] = isset($data['recipient_amount']) ? $data['recipient_amount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets match
     *
     * @return bool
     */
    public function getMatch()
    {
        return $this->container['match'];
    }

    /**
     * Sets match
     *
     * @param bool $match match
     *
     * @return $this
     */
    public function setMatch($match)
    {
        $this->container['match'] = $match;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets order
     *
     * @return string
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param string $order order
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets completed_at
     *
     * @return \DateTime
     */
    public function getCompletedAt()
    {
        return $this->container['completed_at'];
    }

    /**
     * Sets completed_at
     *
     * @param \DateTime $completed_at completed_at
     *
     * @return $this
     */
    public function setCompletedAt($completed_at)
    {
        $this->container['completed_at'] = $completed_at;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return string
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param string $payment_method payment_method
     *
     * @return $this
     */
    public function setPaymentMethod($payment_method)
    {
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku sku
     *
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets quotation
     *
     * @return float
     */
    public function getQuotation()
    {
        return $this->container['quotation'];
    }

    /**
     * Sets quotation
     *
     * @param float $quotation quotation
     *
     * @return $this
     */
    public function setQuotation($quotation)
    {
        $this->container['quotation'] = $quotation;

        return $this;
    }

    /**
     * Gets quotation_currency
     *
     * @return string
     */
    public function getQuotationCurrency()
    {
        return $this->container['quotation_currency'];
    }

    /**
     * Sets quotation_currency
     *
     * @param string $quotation_currency quotation_currency
     *
     * @return $this
     */
    public function setQuotationCurrency($quotation_currency)
    {
        $this->container['quotation_currency'] = $quotation_currency;

        return $this;
    }

    /**
     * Gets recipient_account
     *
     * @return string
     */
    public function getRecipientAccount()
    {
        return $this->container['recipient_account'];
    }

    /**
     * Sets recipient_account
     *
     * @param string $recipient_account recipient_account
     *
     * @return $this
     */
    public function setRecipientAccount($recipient_account)
    {
        $this->container['recipient_account'] = $recipient_account;

        return $this;
    }

    /**
     * Gets recipient_amount
     *
     * @return float
     */
    public function getRecipientAmount()
    {
        return $this->container['recipient_amount'];
    }

    /**
     * Sets recipient_amount
     *
     * @param float $recipient_amount recipient_amount
     *
     * @return $this
     */
    public function setRecipientAmount($recipient_amount)
    {
        $this->container['recipient_amount'] = $recipient_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


